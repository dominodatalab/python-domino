# coding: utf-8

"""
    Domino Public API

    Public API endpoints for Custom Metrics  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from domino._impl.custommetrics import schemas  # noqa: F401


class TargetRangeV1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "condition",
        }
        
        class properties:
            
            
            class condition(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "lessThan": "LESS_THAN",
                        "lessThanEqual": "LESS_THAN_EQUAL",
                        "greaterThan": "GREATER_THAN",
                        "greaterThanEqual": "GREATER_THAN_EQUAL",
                        "between": "BETWEEN",
                    }
                
                @schemas.classproperty
                def LESS_THAN(cls):
                    return cls("lessThan")
                
                @schemas.classproperty
                def LESS_THAN_EQUAL(cls):
                    return cls("lessThanEqual")
                
                @schemas.classproperty
                def GREATER_THAN(cls):
                    return cls("greaterThan")
                
                @schemas.classproperty
                def GREATER_THAN_EQUAL(cls):
                    return cls("greaterThanEqual")
                
                @schemas.classproperty
                def BETWEEN(cls):
                    return cls("between")
            lowerLimit = schemas.NumberSchema
            upperLimit = schemas.NumberSchema
            __annotations__ = {
                "condition": condition,
                "lowerLimit": lowerLimit,
                "upperLimit": upperLimit,
            }
    
    condition: MetaOapg.properties.condition
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowerLimit"]) -> MetaOapg.properties.lowerLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upperLimit"]) -> MetaOapg.properties.upperLimit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["condition", "lowerLimit", "upperLimit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowerLimit"]) -> typing.Union[MetaOapg.properties.lowerLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upperLimit"]) -> typing.Union[MetaOapg.properties.upperLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["condition", "lowerLimit", "upperLimit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        condition: typing.Union[MetaOapg.properties.condition, str, ],
        lowerLimit: typing.Union[MetaOapg.properties.lowerLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        upperLimit: typing.Union[MetaOapg.properties.upperLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TargetRangeV1':
        return super().__new__(
            cls,
            *args,
            condition=condition,
            lowerLimit=lowerLimit,
            upperLimit=upperLimit,
            _configuration=_configuration,
            **kwargs,
        )
