# coding: utf-8

"""
    Domino Public API

    Public API endpoints for Custom Metrics  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from domino._impl.custommetrics import schemas  # noqa: F401


class MetricAlertRequestV1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "metric",
            "modelMonitoringId",
            "targetRange",
            "value",
        }
        
        class properties:
            modelMonitoringId = schemas.StrSchema
            metric = schemas.StrSchema
            value = schemas.NumberSchema
        
            @staticmethod
            def targetRange() -> typing.Type['TargetRangeV1']:
                return TargetRangeV1
            description = schemas.StrSchema
            __annotations__ = {
                "modelMonitoringId": modelMonitoringId,
                "metric": metric,
                "value": value,
                "targetRange": targetRange,
                "description": description,
            }
    
    metric: MetaOapg.properties.metric
    modelMonitoringId: MetaOapg.properties.modelMonitoringId
    targetRange: 'TargetRangeV1'
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelMonitoringId"]) -> MetaOapg.properties.modelMonitoringId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric"]) -> MetaOapg.properties.metric: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetRange"]) -> 'TargetRangeV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["modelMonitoringId", "metric", "value", "targetRange", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelMonitoringId"]) -> MetaOapg.properties.modelMonitoringId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric"]) -> MetaOapg.properties.metric: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetRange"]) -> 'TargetRangeV1': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["modelMonitoringId", "metric", "value", "targetRange", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metric: typing.Union[MetaOapg.properties.metric, str, ],
        modelMonitoringId: typing.Union[MetaOapg.properties.modelMonitoringId, str, ],
        targetRange: 'TargetRangeV1',
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetricAlertRequestV1':
        return super().__new__(
            cls,
            *args,
            metric=metric,
            modelMonitoringId=modelMonitoringId,
            targetRange=targetRange,
            value=value,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from .target_range_v1 import TargetRangeV1
