# coding: utf-8

"""
    Domino Public API

    Public API endpoints for Custom Metrics  # noqa: E501

    The version of the OpenAPI document: 5.3.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from domino._impl.custommetrics import schemas  # noqa: F401


class MetricValueV1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "referenceTimestamp",
            "value",
            "tags",
        }
        
        class properties:
            referenceTimestamp = schemas.StrSchema
            value = schemas.NumberSchema
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MetricTagV1']:
                        return MetricTagV1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MetricTagV1'], typing.List['MetricTagV1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MetricTagV1':
                    return super().__getitem__(i)
            __annotations__ = {
                "referenceTimestamp": referenceTimestamp,
                "value": value,
                "tags": tags,
            }
    
    referenceTimestamp: MetaOapg.properties.referenceTimestamp
    value: MetaOapg.properties.value
    tags: MetaOapg.properties.tags
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referenceTimestamp"]) -> MetaOapg.properties.referenceTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["referenceTimestamp", "value", "tags", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referenceTimestamp"]) -> MetaOapg.properties.referenceTimestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["referenceTimestamp", "value", "tags", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        referenceTimestamp: typing.Union[MetaOapg.properties.referenceTimestamp, str, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MetricValueV1':
        return super().__new__(
            cls,
            *args,
            referenceTimestamp=referenceTimestamp,
            value=value,
            tags=tags,
            _configuration=_configuration,
            **kwargs,
        )

from .metric_tag_v1 import MetricTagV1
